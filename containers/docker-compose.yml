version: "3.6"
services:
  postgres_db:
    image: postgres:9.6
    volumes:
      - ./db_init/pg-init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=dbadmin
      - POSTGRES_DB=app_db
    ports:
      - "5432:5432"

  postgres_warehouse:
    image: postgres:9.6
    container_name: data_warehouse_postgres
    volumes:
      - ./warehouse/pg-init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=warehouseadmin
      - POSTGRES_DB=data_warehouse
    ports:
      - "5437:5432"

  mongodb:
    image: mongo
    container_name: datalake_mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: lakeadmin
      MONGO_INITDB_DATABASE: datalake

  minio-service:
    container_name: datalake
    image: minio/minio:RELEASE.2018-11-15T01-26-07Z
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data

  miniosetup:
    image: minio/mc
    depends_on:
      - minio-service
    entrypoint: >
      /bin/sh -c " sleep 10; /usr/bin/mc config host add myminio http://minio-service:9000 minio minio123; /usr/bin/mc mb myminio/state; /usr/bin/mc mb myminio/datalake/landing; exit 0; "

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.7
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.5
    hostname: broker
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_KRAFT_CLUSTER_ID=1
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CREATE_TOPICS= "kafka_messages_topic:1:1"


  # DataOps Serviec is located ../dataops
  # dbt:
  #   container_name: dbt-core
  #   image: dbt-data-ops
  #   command: "test"

  #   # environment:
  #   #   - DBT_PROFILES_DIR=/root/.dbt/
  #   volumes:
  #     - type: bind
  #       source: ../../servers/core_services/drs/app
  #       target: /usr/app
  #     - type: bind
  #       source: ../../servers/core_services/drs/app/profiles.yml
  #       target: /root/.dbt/profiles.yml

volumes:
  kafka_data:
  zookeeper_data:
  grafana_storage: {}
  postgres_data:
  vault-volume:
